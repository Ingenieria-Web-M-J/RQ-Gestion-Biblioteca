import type { GraphQLResolveInfo } from "graphql";
import { AggregateLibrarianArgs } from "./args/AggregateLibrarianArgs";
import { CreateManyLibrarianArgs } from "./args/CreateManyLibrarianArgs";
import { CreateOneLibrarianArgs } from "./args/CreateOneLibrarianArgs";
import { DeleteManyLibrarianArgs } from "./args/DeleteManyLibrarianArgs";
import { DeleteOneLibrarianArgs } from "./args/DeleteOneLibrarianArgs";
import { FindFirstLibrarianArgs } from "./args/FindFirstLibrarianArgs";
import { FindFirstLibrarianOrThrowArgs } from "./args/FindFirstLibrarianOrThrowArgs";
import { FindManyLibrarianArgs } from "./args/FindManyLibrarianArgs";
import { FindUniqueLibrarianArgs } from "./args/FindUniqueLibrarianArgs";
import { FindUniqueLibrarianOrThrowArgs } from "./args/FindUniqueLibrarianOrThrowArgs";
import { GroupByLibrarianArgs } from "./args/GroupByLibrarianArgs";
import { UpdateManyLibrarianArgs } from "./args/UpdateManyLibrarianArgs";
import { UpdateOneLibrarianArgs } from "./args/UpdateOneLibrarianArgs";
import { UpsertOneLibrarianArgs } from "./args/UpsertOneLibrarianArgs";
import { Librarian } from "../../../models/Librarian";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateLibrarian } from "../../outputs/AggregateLibrarian";
import { LibrarianGroupBy } from "../../outputs/LibrarianGroupBy";
export declare class LibrarianCrudResolver {
    aggregateLibrarian(ctx: any, info: GraphQLResolveInfo, args: AggregateLibrarianArgs): Promise<AggregateLibrarian>;
    createManyLibrarian(ctx: any, info: GraphQLResolveInfo, args: CreateManyLibrarianArgs): Promise<AffectedRowsOutput>;
    createOneLibrarian(ctx: any, info: GraphQLResolveInfo, args: CreateOneLibrarianArgs): Promise<Librarian>;
    deleteManyLibrarian(ctx: any, info: GraphQLResolveInfo, args: DeleteManyLibrarianArgs): Promise<AffectedRowsOutput>;
    deleteOneLibrarian(ctx: any, info: GraphQLResolveInfo, args: DeleteOneLibrarianArgs): Promise<Librarian | null>;
    findFirstLibrarian(ctx: any, info: GraphQLResolveInfo, args: FindFirstLibrarianArgs): Promise<Librarian | null>;
    findFirstLibrarianOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstLibrarianOrThrowArgs): Promise<Librarian | null>;
    librarians(ctx: any, info: GraphQLResolveInfo, args: FindManyLibrarianArgs): Promise<Librarian[]>;
    librarian(ctx: any, info: GraphQLResolveInfo, args: FindUniqueLibrarianArgs): Promise<Librarian | null>;
    getLibrarian(ctx: any, info: GraphQLResolveInfo, args: FindUniqueLibrarianOrThrowArgs): Promise<Librarian | null>;
    groupByLibrarian(ctx: any, info: GraphQLResolveInfo, args: GroupByLibrarianArgs): Promise<LibrarianGroupBy[]>;
    updateManyLibrarian(ctx: any, info: GraphQLResolveInfo, args: UpdateManyLibrarianArgs): Promise<AffectedRowsOutput>;
    updateOneLibrarian(ctx: any, info: GraphQLResolveInfo, args: UpdateOneLibrarianArgs): Promise<Librarian | null>;
    upsertOneLibrarian(ctx: any, info: GraphQLResolveInfo, args: UpsertOneLibrarianArgs): Promise<Librarian>;
}
