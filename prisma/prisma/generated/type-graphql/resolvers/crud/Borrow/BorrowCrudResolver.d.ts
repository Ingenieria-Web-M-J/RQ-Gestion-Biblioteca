import type { GraphQLResolveInfo } from "graphql";
import { AggregateBorrowArgs } from "./args/AggregateBorrowArgs";
import { CreateManyBorrowArgs } from "./args/CreateManyBorrowArgs";
import { CreateOneBorrowArgs } from "./args/CreateOneBorrowArgs";
import { DeleteManyBorrowArgs } from "./args/DeleteManyBorrowArgs";
import { DeleteOneBorrowArgs } from "./args/DeleteOneBorrowArgs";
import { FindFirstBorrowArgs } from "./args/FindFirstBorrowArgs";
import { FindFirstBorrowOrThrowArgs } from "./args/FindFirstBorrowOrThrowArgs";
import { FindManyBorrowArgs } from "./args/FindManyBorrowArgs";
import { FindUniqueBorrowArgs } from "./args/FindUniqueBorrowArgs";
import { FindUniqueBorrowOrThrowArgs } from "./args/FindUniqueBorrowOrThrowArgs";
import { GroupByBorrowArgs } from "./args/GroupByBorrowArgs";
import { UpdateManyBorrowArgs } from "./args/UpdateManyBorrowArgs";
import { UpdateOneBorrowArgs } from "./args/UpdateOneBorrowArgs";
import { UpsertOneBorrowArgs } from "./args/UpsertOneBorrowArgs";
import { Borrow } from "../../../models/Borrow";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateBorrow } from "../../outputs/AggregateBorrow";
import { BorrowGroupBy } from "../../outputs/BorrowGroupBy";
export declare class BorrowCrudResolver {
    aggregateBorrow(ctx: any, info: GraphQLResolveInfo, args: AggregateBorrowArgs): Promise<AggregateBorrow>;
    createManyBorrow(ctx: any, info: GraphQLResolveInfo, args: CreateManyBorrowArgs): Promise<AffectedRowsOutput>;
    createOneBorrow(ctx: any, info: GraphQLResolveInfo, args: CreateOneBorrowArgs): Promise<Borrow>;
    deleteManyBorrow(ctx: any, info: GraphQLResolveInfo, args: DeleteManyBorrowArgs): Promise<AffectedRowsOutput>;
    deleteOneBorrow(ctx: any, info: GraphQLResolveInfo, args: DeleteOneBorrowArgs): Promise<Borrow | null>;
    findFirstBorrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstBorrowArgs): Promise<Borrow | null>;
    findFirstBorrowOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstBorrowOrThrowArgs): Promise<Borrow | null>;
    borrows(ctx: any, info: GraphQLResolveInfo, args: FindManyBorrowArgs): Promise<Borrow[]>;
    borrow(ctx: any, info: GraphQLResolveInfo, args: FindUniqueBorrowArgs): Promise<Borrow | null>;
    getBorrow(ctx: any, info: GraphQLResolveInfo, args: FindUniqueBorrowOrThrowArgs): Promise<Borrow | null>;
    groupByBorrow(ctx: any, info: GraphQLResolveInfo, args: GroupByBorrowArgs): Promise<BorrowGroupBy[]>;
    updateManyBorrow(ctx: any, info: GraphQLResolveInfo, args: UpdateManyBorrowArgs): Promise<AffectedRowsOutput>;
    updateOneBorrow(ctx: any, info: GraphQLResolveInfo, args: UpdateOneBorrowArgs): Promise<Borrow | null>;
    upsertOneBorrow(ctx: any, info: GraphQLResolveInfo, args: UpsertOneBorrowArgs): Promise<Borrow>;
}
